-- 조인의 종류
1. inner join : 모든 조인의 기본 : 조인 조건에 만족하는 데이터만 출력
2. outer join : 조인 조건에 만족하지 않는 데이터도 출력
		 -- left outer join, right outer join, full outer join
3. equi join  : 조인 연산이 등가(=)형태
4. non equi join : 조인 연산이 등가(=)가 아닌 형태
5. self join  : 하나의 테이블을 두 번 이상 조인
6. natural join : 조인 조건 없이 조인

-- outer join
1. 여러 테이블의 조인 발생 시, 어떤 관계에서 데이터의 생략이 발생하는지를 찾아야 함
2. 위 관계에서 어떤 테이블 기준으로 데이터를 표현할지
3. 기준이 되는 테이블 반대쪽 컬럼 뒤에 (+) 기호

- 기준 테이블 찾기 : 생략된 데이터를 추가로 출력하고자 하는 쪽 테이블

사원                        부서
사번         이름    부서번호    부서번호    부서명
	1        a         10                  10      데이터분석부
	2        b         20                  20      데이터아키텍처부
	3        c         null                30      총무부
=>기준 데이터는 '사원'
from 사원 left outer join 부서


-- student, professor, department 테이블에서 학생이름, 학년 , 제1전공명, 지도교수이름 출력
-- d-s-p
select * from student;

select s.NAME, s.GRADE, 
       d.DNAME as 제1전공,
       p.NAME  as 지도교수명
  from student s, professor p, department d
 where s.DEPTNO1 = d.DEPTNO
   and s.PROFNO = p.PROFNO;  -->지도교수가 없는(null)학생들은 출력 안됨
   
select s.name, s.GRADE, d.DNAME, p.NAME 
  from student s join department d
    on s.DEPTNO1 = d.DEPTNO 
  join professor p
    on s.PROFNO = p.PROFNO; -->지도교수가 없는(null)학생들은 출력 안됨
    
--기준이 되는 테이블인 student의 null도 출력하고 싶을 때, 다른 테이블에 (+) 추가하기
select s.NAME, s.GRADE, 
       p.NAME  as 지도교수명
  from student s, professor p
 where s.PROFNO = p.PROFNO(+);  --기준이 되는 테이블 반대쪽에 (+) 입력
   
--1. s-d (데이터 생략 발생X)
--2. s-p (데이터 생략 발생O) ->p뒤에 (+) 입력
select s.NAME, s.GRADE, 
       d.DNAME as 제1전공,
       p.NAME  as 지도교수명
  from student s, professor p, department d
 where s.DEPTNO1 = d.DEPTNO
   and s.PROFNO = p.PROFNO(+);

--outer join시 주의** : 기준이 되는 테이블을 잘 찾아야 함
-- 1) student(테이블 기준) 학생 이름과 각 학생의 지도교수의 이름 출력 (1:1 대응 가능)
select s.name as 학생이름, p.name as 지도교수이름
   from student s, professor p
 where s.PROFNO = p.PROFNO(+);

select s.name as 학생이름, p.name as 지도교수이름
   from student s left outer join professor p
    on s.PROFNO = p.PROFNO;
 
-- 2) professor(테이블 기준) 교수의 이름과 각 교수의 지도학생의 이름 출력 (1:다)
select s.name as 학생이름, p.name as 지도교수이름
   from student s, professor p
 where s.PROFNO(+) = p.PROFNO;
 
 select s.name as 학생이름, p.name as 지도교수이름
   from student s right outer join professor p
    on s.PROFNO = p.PROFNO;
    
-- 문제
-- emp 테이블에서 각 직원의 등급을 기준으로 
-- 등급에 맞는 하한연봉(LOSAL)과 상한연봉(HISAL)을 함께 출력
-- (등급별 상한, 하한 연봉은 SALGRADE 참조)
-- 단, 등급은 아래와 같이 부여
-- 1 : 10번 부서이면서 4000이하
-- 2 : 10번 부서이면서 4000초과
-- 3 : 20번 부서이면서 1000이상 2500이하
-- 4 : 20번 부서이면서 2500초과
-- 5 : 30번 부서
-- 단, 등급 조건에 맞지 않는 사람도 함께 출력
select e.ename, e.deptno, e.sal,
       case when deptno = 10 and sal <= 4000 then 1
            when deptno = 10 and sal > 4000 then 2
            when deptno = 20 and sal between 1000 and 2500 then 3
            when deptno = 20 and sal > 2500 then 4
            when deptno = 30 then 5
        end as grade,
       s.LOSAL, 
       s.HISAL
  from emp e, SALGRADE s
 where case when e.deptno = 10 and e.sal <= 4000 then 1
            when e.deptno = 10 and e.sal > 4000 then 2
            when e.deptno = 20 and e.sal between 1000 and 2500 then 3
            when e.deptno = 20 and e.sal > 2500 then 4
            when e.deptno = 30 then 5
        end = s.grade(+);    

select e.ename, e.deptno, e.sal,
       s.LOSAL, 
       s.HISAL
  from emp e left outer join SALGRADE s
    on case when e.deptno = 10 and e.sal <= 4000 then 1
            when e.deptno = 10 and e.sal > 4000 then 2
            when e.deptno = 20 and e.sal between 1000 and 2500 then 3
            when e.deptno = 20 and e.sal > 2500 then 4
            when e.deptno = 30 then 5
        end = s.grade;         
          
--full outer join : 양쪽 테이블 모두 기준. 왼쪽 테이블 기준 결과 + 오른쪽 테이블 기준 결과
--1. oracle 표준 : 원칙적으로 불가 (양쪽 모두 (+) 전달 불가), union을 사용하여 대체 가능
--2. ansi 표준 : full outer join으로 처리
--1) oracle 표준
select s.name as 학생이름, p.name as 교수이름
  from student s, professor p
 where s.PROFNO(+) = p.PROFNO(+);   --error : outer-join된 테이블은 1개만 지정     

select s.name as 학생이름, p.name as 지도교수이름
   from student s, professor p
 where s.PROFNO = p.PROFNO(+)
union
select s.name as 학생이름, p.name as 지도교수이름
   from student s, professor p
 where s.PROFNO(+) = p.PROFNO;      -- left outer join 결과와 right outer join 결과의 합집합(중복제거)와 같음
 
--2) ansi 표준
select s.name as 학생이름, p.name as 지도교수이름
   from student s full outer join professor p
     on s.PROFNO = p.PROFNO;

-- self join
-- emp 테이블에서 각 직원의 이름, 부서번호, sal, 상위관리자 이름 출력 (emp 테이블 한번의 access로 불가능)
select e1.ENAME as 사원이름, e2.ENAME as 상위관리자
  from emp e1, emp e2
 where e1.MGR = e2.EMPNO(+);
      
select e1.ENAME as 상위관리자, e2.ENAME as 사원이름
  from emp e1, emp e2
 where e1.EMPNO(+) = e2.MGR;
 
select e1.ENAME as 사원이름, e2.ENAME as 상위관리자
  from emp e1 left outer join emp e2
    on e1.MGR = e2.EMPNO;

--문제
--department 테이블을 사용하여 아래와 같이 각 학과이름과 해당 학과의 소속학과이름을 (바로 위) 동시 출력
--학과이름      학부이름
--컴퓨터공학과 컴퓨터정보학부
--전자공학과 메카트로닉스학부
select d1.deptno,
       d1.dname as 학과,
       d2.DNAME as 학부
  from department d1,department d2
 where d1.PART = d2.DEPTNO(+);
 
select d1.deptno,
       d1.dname as 학과,
       d2.DNAME as 학부
  from department d1 left outer join department d2
    on d1.PART = d2.DEPTNO;
    
--1. 아우터 조인시(+) 나열 범위
--p1과 p2의 관계에서데이터 생략이 발생하고, p1 기준으로 아우터 조인 시
--p1과 p2에서 발생되는 모든 조건에 (+)를 붙여줘야 함

select p1.PROFNO, p1.NAME, p1.DEPTNO, d.DNAME, p1.HIREDATE,
       p2.PROFNO, p2.NAME, p2.DEPTNO
  from professor p1, professor p2, department d
 where p1.DEPTNO = p2.DEPTNO(+)         ---(+)필요
   and p1.HIREDATE > p2.HIREDATE(+)     ---(+)필요
   and p1.DEPTNO = d.DEPTNO;
   
   
--2. count 컬럼   
select p1.PROFNO, p1.NAME, p1.DEPTNO, d.DNAME, p1.HIREDATE,
       count(*),                        -- *는 두 테이블의 모든 컬럼의 값이 널일때
       count(p2.PROFNO)                 -- p1 테이블은 각 교수정보이고 p2가 지도 교수 정보라 p2를 카운트 해야함
  from professor p1, professor p2, department d
 where p1.DEPTNO = p2.DEPTNO(+)         --(+)필요
   and p1.HIREDATE > p2.HIREDATE(+)     --(+)필요
   and p1.DEPTNO = d.DEPTNO
   group by p1.PROFNO, p1.NAME, p1.DEPTNO, d.DNAME, p1. hiredate;


--문제
--student 테이블에서 각 학생의 이름, 키와 함께 학생보다 키가 큰 학생의 수를 아래와 같이 출력
--이름      키       키큰사람수
--서진수    180          3
--박동호    182          1
--노정호    184          0
--,,,

select s1.STUDNO, s1.NAME, s1.HEIGHT, 
       count(s2.STUDNO) as 학생수
  from student s1, student s2
 where s1.HEIGHT < s2.HEIGHT(+)
 group by s1.STUDNO, s1.NAME, s1.HEIGHT
 order by s1.name;
 
--문제
--professor 테이블에서 각 교수의 이름, 소속학과명, 입사일과 함께
--각 교수별로 같은 학과 내에 선배교수의 수를 출력
select * from professor;
select p1.NAME as 교수이름, p1.DEPTNO, p1.HIREDATE, count(p2.NAME) as 선배교수
  from professor p1, professor p2
 where p1.HIREDATE > p2.HIREDATE(+)
 group by p1.NAME, p1.DEPTNO, p1.HIREDATE;


연습문제
--0) professor, department 테이블에서 각 교수의 이름, 소속학과명, 입사일과 함께
--각 교수별로 같은학과 내에 선배교수의 수를 출력
--d-p1-p2
select p1.profno, p1.name, p1.deptno, d.dname, p1.hiredate,
       p2.profno
  from professor p1, professor p2, department d
 where p1.deptno = p2.deptno(+)
   and p1.HIREDATE > p2.HIREDATE(+)
   and p1.deptno = d.deptno;

select p1.profno, p1.name, p1.deptno, d.dname, p1.hiredate,
       count(p2.profno) as 선배수
  from professor p1, professor p2, department d
 where p1.deptno = p2.deptno(+)
   and p1.HIREDATE > p2.HIREDATE(+)
   and p1.deptno = d.deptno
 group by p1.profno, p1.name, p1.deptno, p1.hiredate, d.dname;

--1) student테이블에서 각 학생의 이름, 제1전공학과명을 
--출력하고 담당지도교수 이름과 지도교수의 소속 학과명도 
--함께 출력하여라. 단, 지도교수가 없는 학생도 모두 출력.
select s.name, s.deptno1, d.DNAME, s.profno, 
       p.name as  지도교수이름, p.deptno,
       d2.dname as 지도교수소속 --d.dname쓰면 s.DEPTNO1 = d.DEPTNO이 말임->쓸 필요 없음->d2필요
  from student s, department d, professor p, department d2
 where s.deptno1 = d.DEPTNO
   and s.PROFNO = p.PROFNO(+)
   and p.deptno = d2.DEPTNO(+);

--departnemt(deptno)- student(deptno1,profno) - professor(profno,deptno)(+) - department(deptno)(+)

*ansi 표준
select s.name, s.deptno1, d.DNAME, s.profno, 
       p.name as  지도교수이름, p.deptno,
       d2.dname as 지도교수소속
  from student s join department d
    on s.deptno1 = d.DEPTNO
  left outer join professor p
    on s.PROFNO = p.PROFNO 
  left outer join department d2
    on p.deptno = d2.DEPTNO;

--2) student 테이블과 exam_01, department 테이블을 
--이용하여 각 학과별 평균 점수와 최고 점수, 최저 점수를 
--나타내되 학과이름, 학과번호와 함께 출력.
select d.deptno, d.dname, e.total
  from student s, exam_01 e, department d
 where s.studno = e.studno
   and s.deptno1 = d.deptno;
 
select d.deptno, d.dname, 
       avg(e.total) as 평균점수,
       min(e.total) as 최저점수,
       max(e.total) as 최고점수
  from student s, exam_01 e, department d
 where s.studno = e.studno
   and s.deptno1 = d.deptno
 group by d.deptno, d.dname;

--3) emp2, dept2 테이블에서 각 직원과 나이가 같으면서 
--취미가 같은 직원의 수를 직원의 이름, 부서이름, 취미, 
--pay와 함께 출력하여라.
--d - e1 - e2  
select e1.name, e1.hobby, to_char(e1.birthday, 'YYYY'),
       e2.name, e2.hobby, to_char(e2.birthday, 'YYYY')
  from emp2 e1, emp2 e2
 where to_char(e1.birthday, 'YYYY') = to_char(e2.birthday(+), 'YYYY')
   and e1.HOBBY = e2.HOBBY(+)
   and e1.empno != e2.empno(+);  --단계 1

select e1.name, e1.hobby, e1.pay, d.dname,
       e2.name, e2.hobby, to_char(e2.birthday, 'YYYY')
  from emp2 e1, emp2 e2, dept2 d
 where to_char(e1.birthday, 'YYYY') = to_char(e2.birthday(+), 'YYYY')
   and e1.HOBBY = e2.HOBBY(+)
   and e1.empno != e2.empno(+)
   and e1.DEPTNO = d.DCODE;   --단계2
   
select e1.name, e1.hobby, e1.pay, d.dname,
       count(e2.EMPNO) as 친구수
  from emp2 e1, emp2 e2, dept2 d
 where to_char(e1.birthday, 'YYYY') = to_char(e2.birthday(+), 'YYYY')
   and e1.HOBBY = e2.HOBBY(+)
   and e1.empno != e2.empno(+)
   and e1.DEPTNO = d.DCODE
 group by e1.name, e1.hobby, e1.pay, d.dname;  -- 정답 : 직원별 그룹핑

--4) student 테이블에서 각 학생마다 같은 성별 내 몸무게가 많이 나가는 학생의
--이름과 학년, 몸무게, 시험 성적 출력
select s1.*,
       s2.name, substr(s2.jumin,7,1), s2.weight
  from student s1, student s2
 where substr(s1.jumin,7,1) = substr(s2.jumin,7,1)
   and s1.WEIGHT < s2.WEIGHT;       -- '<' 이기 때문에 본인 포함X
    
select s1.name, s1.grade, s1.weight, e.total,
       count(s2.studno) as 학생수
  from student s1, student s2, exam_01 e
 where substr(s1.jumin,7,1) = substr(s2.jumin(+),7,1)
   and s1.WEIGHT < s2.WEIGHT(+)
   and s1.studno = e.studno
 group by s1.name, s1.grade, s1.weight, e.total;


--5) emloyees 테이블을 사용하여 각 직원의 입사동기(입사한 해가 같은 경우)의 수를
--각 직원의 이름, 연봉, 상위관리자 이름 정보와 함께 출력
select e1.EMPLOYEE_ID as 이름, e1.FIRST_NAME, e1.SALARY, e1.MANAGER_ID as 상위ID,
       e2.FIRST_NAME as 상위이름,
       e3.EMPLOYEE_ID, e3.FIRST_NAME, e3.SALARY, e3.MANAGER_ID
  from employees e1, employees e2, employees e3
 where e1.MANAGER_ID = e2.EMPLOYEE_ID
   and extract(year from e1.HIRE_DATE)  = extract(year from e3.hire_date)
   and e1.EMPLOYEE_ID != e3.EMPLOYEE_ID;


select e1.FIRST_NAME, e1.SALARY, e3.FIRST_NAME as 상위관리자명,
       count(e2.EMPLOYEE_ID) as 동기수
  from employees e1, employees e2, employees e3
 where to_char(e1.hire_date, 'YYYY') = to_char(e2.hire_date(+), 'YYYY')
   and e1.EMPLOYEE_ID != e2.EMPLOYEE_ID(+)
   and e1.MANAGER_ID = e3.EMPLOYEE_ID(+)
 group by e1.FIRST_NAME, e1.SALARY, e3.FIRST_NAME;
