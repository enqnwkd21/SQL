-- 서브쿼리
-- 구분
--1) 위치에 따라
--select ...(select ...)  -- 스칼라 서브쿼리
--  from ..., (...)           -- 인라인뷰
-- where ..., (...)         -- (일반) 서브쿼리
 
-- 2) 형태에 따라
--2-1) 단일행 서브쿼리 : 서브쿼리 결과가 단 하나의 행, =, >, < 연산자를 사용할 수 있음
--2-2) 다중행 서브쿼리 : 서브쿼리 결과가 두 개 이상의 행 리턴, =, >, < 연산자를 사용할 수 없음 (in, all, any)
--2-3) 다중컬럼 서브쿼리 : 메인쿼리절에서 비교 대상이 두 컬럼 이상일 경우
--2-4) 상호연관 서브쿼리 : 메인쿼리와 서브쿼리의 비교가 서로 연관되어 있는 형태

-- emp테이블에서 각 부서내 부서의 평균연봉보다 높은 연봉을 받는 직원 정보 출력
select deptno, round(avg(sal),2)
  from EMP
 group by deptno;

select *
  from EMP
 where (deptno, sal) > (select deptno, round(avg(sal),2)    -- 불가(그룹으로 대소 비교 불가)
                        from EMP
                       group by deptno);
select *
  from EMP
 where deptno in (select deptno    -- 의미없는 조건
                    from EMP
                   group by deptno)
   and sal > (select round(avg(sal),2)    -- 에러
                from EMP
              group by deptno);

-- 위 에러를 해결하기 위해 각 행마다 부서번호를 확인하고 서브쿼리절에 전달하여 부서에 매칭된
-- 평균연봉을 가져와 조건에 맞는지 여부를 확인
select *
  from emp e1
 where 1=1
   and e1.sal > (select round(avg(sal),2)    -- 불가
                   from emp e2
                  group by deptno)
   and e1.deptno=e2.deptno;                  -- 불가 : 메인쿼리의 from 절에 e2가 없어서
   
 select *
  from emp e1
 where 1=1
   and e1.sal > (select round(avg(sal),2)  
                   from emp e2
                  where e1.deptno=e2.deptno  -- 서브쿼리 결과를 단 한건으로 만드는 조건****매행마다 그 사람의 소속부서의 평균 연봉을 가져오는 조건
                  group by deptno);          
                  
 select *
  from emp e1
 where 1=1
   and e1.sal > (select round(avg(e2.sal),2)  
                   from emp e2
                  where e1.deptno=e2.deptno );    -- group by는 생략가능
                                                                             -- 메인쿼리절에서 전달받은 각행의 부서가 서브쿼리절에서 특정
                                                                             -- 단 하나의 부서에 대해서만 선택되기 때문
                                             
-- 상호연관 서브쿼리 실행 순서
--1. emp의 첫번째 행 스캔
--2. 첫번째 행의 sal 확인 (800)
--3. 서브쿼리에서 e1.deptno 확인(메인쿼리의 deptno=>20)
--4. 서브쿼리에서 20번 부서의 평균연봉을 계산
--5. 메인쿼리의 sal과 서브쿼리의 결과(각 행의 부서번호에 맞는 평균연봉를 비교
--   =>800 > 2175 조건 확인
   
--e1.deptno=e2.deptno 조건이 없으면 메인쿼리의 sal을 비교할 대상이
--다중인 avg(sal) 중에 무엇인지 몰라 비교를 못하는데
--e1.deptno=e2.deptno 조건 덕분에 sal의 부서가 서브쿼리절에서 특정되고 
--특정된 부서의 단하나의 avg(sal)을 비교할 수 있어서 해당 조건이 필요함

-- 문제
--student 테이블에서 각 학년별 평균키보다 큰 학생의 이름, 학년, 키 출력
select grade, avg(height) as avg_height
  from student
 group by grade;
 
--1) 인라인뷰
select s.NAME, s.GRADE, s.HEIGHT, i.avg_height
  from student s, (select grade, avg(height) as avg_height
                     from student
                    group by grade) i
 where s.HEIGHT > i.avg_height
   and s.GRADE = i.grade;
 

--2) 상호연관
select s.NAME, s.GRADE, s.HEIGHT --,i.avg_height은 입력 못함. 상호연관은 평균 키는 출력X
  from student s
 where s.HEIGHT > (select avg(s1.height)
                    from student s1
                   where s.grade = s1.grade);
                   
-- 스칼라 서브쿼리
-- select절에 사용하는 서브쿼리
-- 조인의 대체 표현(두 테이블의 연결 조건이 메인쿼리가 아닌 서브쿼리에 전달)
-- 조인에 비해서는 성능이 대체적으로 다소 느림
-- 아우터 조인을 사용하지 않아도 조인 조건 맞지 않는 데이터가 출력 됨
    --=> where 절을 사용하지 않았으니깐
--select, ..., (select ...)
  from ;
--select...(select...from b where a=b)
from a
--select는 순서 상관X, 동시다발적으로 일어남

-- emp 테이블에서 30번 부서직원의 이름, 입사일, 연봉, 부서번호를 출력하되, 
-- 더이상 30번 부서는 존재하지 않아 SMITH 직원의 부서번호로 출력
select * from emp;

select ename, hiredate, sal, (select deptno
                                from emp
                               where ename = 'SMITH') as deptno
  from emp
 where deptno = 30;
 
-- 각 직원의 이름, 입사일, 연봉, 부서명 출력(부서명을 스칼라 서브쿼리 사용)
select ename, hiredate, sal, deptno, (select dname
                                        from dept d
                                       where d.DEPTNO = e.deptno) as 부서명                             
  from emp e;  

-- student, professor 테이블을 사용하여 각 학생의 이름, 학년, 지도교수명 출력
--1) 조인
select s.NAME, s.GRADE, p.NAME
  from student s, professor p
 where s.PROFNO = p.PROFNO(+);

 
--2) 스칼라 서브쿼리 ( 조인이랑 그냥 다른 형식임 조인을 안쓰려고 사용하는 거 아님)
select s.NAME, s.GRADE, (select p.NAME 
                           from professor p
                          where s.PROFNO = p.PROFNO)
  from student s; 
  -- 메인쿼리 즉, select 절에  s.NAME, s.GRADE가 있으니 이건 고정이다.

-- 인덱스
-- 방대한 테이블의 데이터로부터 사용자가 원하는 데이터를 빠르게 찾기 위해
-- 정보별 정보의 저장위치를 기억하고 있는 객체

-- 1.index 생성
-- 중복된 이름으로 생성 불가, 중복된 내용으로도 생성 불가
create index idx_emp_deptno on emp(deptno);

select rownum, studno, rowid --각 행마다의 고유 식별 주소
  from student;
  
--위 인덱스는 emp 테이블의 deptno 순서대로 어디에 위치해있는지를 정리한 목차로
--아래의 형태처럼 생겼을 것...
select deptno, rowid
  from EMP
 order by deptno;

--2. index 삭제
	• drop index idx_emp_deptno_job;
	• create index idx_emp_deptno_job on emp(deptno, job);

--위 인덱스는 emp데이터의 모든 위치를 deptno와 job 순서대로 정리한것으로
--아래와 같이 생겼을 것..
select deptno, job, rowid
  from EMP
 order by deptno, job;

--3. index 조회
--따라서 사용자 입장(쿼리짜는사람)에서는 조회를 빠르게 하려면
--이미 누가 만들어 놓은 (주로 DBA) 인덱스 정보를 활용하여
--인덱스 스캔을 유도하는 형색의 조건문을 작성해야 빠른 성능 보장

select TABLE_NAME,  -- 테이블 이름
       INDEX_NAME,  -- 인덱스 이름
       UNIQUENESS,  -- unique 인덱스 여부
       INDEX_TYPE   -- 인덱스 종류
  from user_indexes
 where table_name = 'EMP';  --무조건 대문자

--4.실행계획
-- ctrl + e : 쿼리의 실행계획(내부적으로 데이터를 조회하는 상세 과정) 확인
select *
  from EMP
 where empno = 7369;    --empno가 7369인 데이터를 조회하라고 DB한테 전달하면
                                            --DB가 내부적으로 7369가 어디있는지 그 주소를 확인하고 (인덱스가 있을 경우)
                                            --해당 주소로 바로 접근하여 해당 데이터를 가져다 준다
                                            --사용자가 직접 인덱스를 사용해서 데이터를 조회하는게 아님!
                        
  
--5. FBI(Function Based Index)
-- 인덱스가 컬럼 형태 그대로 만들어지는게 아닌,
-- 컬럼의 변형된 형태로 만들어 진 경우를 말하고 업무적으로 변형된 컬럼의 형태로
-- 조회를 자주 해야하는 경우에 한해서 내부적 협의를 거쳐 DBA가 생성
drop index idx_std_jumin_fbi;
create index idx_std_jumin_fbi on student(substr(jumin,7,1));

-- 6.INDEX Suppressing Error
--조회하고자 하는 컬럼에 대해 이미 인덱스가 생성되어 있음에도 불구하고
--조회 컬럼에 변형이 발생하여 인덱스를 스캔하지 못하는 현상 => 성능저하 유발
--예1) 비교하고자 하는 형(TYPE)불일치
select name, grade
  from student
 where substr(jumin,7,1)=1;     -- index suppressing error로 인해 위에서 만든 인덱스 스캔 불가
                                                       -- 문자와 숫자를 비교하면서 묵시적 형변환 발생
                                                       -- to_number(substr(jumin,7,1)=1로 컬럼 변형이 발생
                                                       -- 인덱스를 만든 컬럼에는 어떤 변형이 발생하면 인덱스 스캔 기본적으로 불가
                                
--따라서 위 쿼리는 아래와 같이 변경해줘야 인덱스를 제대로 스캔할 수 있음
select name, grade
  from student
 where substr(jumin,7,1)='1';   -- INDEX suppressing error발생X

select substr(jumin,7,1), rowid
  from student
 order by substr(jumin,7,1);

--사물함으로 비유를하면
--where절에 조건이 사용됐을때(원하는 데이터를 찾아야 할 때)
--인덱스를 활용하지 않고 찾고자 하는 데이터가 어딨는지 모를때 사물함 전체를 하나하나 다열어보는 것이고
--index는 사물함 중 한칸을 콕 짚어주는 것이고 인덱스를 활용해서 데이터를 찾는 행위가 
--사물함 안에 있는 내용물을 찾는 방법이라고 보면 됨

--
create index idx_emp_sal on emp(sal);
select ename, sal
  from EMP
 where sal>1500;
 
-- 10% 인상된 연봉이 1800이상인 사람 이름, 연봉 출력
create index idx_emp_sal_fbi on emp(sal*1.1);
select ename, (sal*1.1) as 연봉
  from EMP
 where sal*1.1 > 1800;

[해결방법]
--1) FBI를 만든다 (sal*1.1)
create index idx_emp_sal_fbi on emp(sal * 1.1);

--2) sql을 고친다. sal 컬럼에 변형이 발생하지 않도록*****
select ename, sal as 연봉
  from EMP
 where sal> 1800/1.1;


연습문제

--1. STUDENT 테이블과 EXAM_01, HAKJUM 테이블을 사용하여
--각 학생의 이름, 학년, 성적, 학점 출력(메인쿼리 테이블 한 개, 나머지 스칼라 서브쿼리 이용)
select s.name, s.grade,
                (select e.TOTAL
                   from exam_01 e
                  where s.STUDNO = e.STUDNO) as 성적,
                (select h.GRADE
                   from exam_01 e, hakjum h
                  where s.STUDNO = e.STUDNO
                    and e.TOTAL between h.MIN_POINT and h.MAX_POINT) as 학점          
  from student s; --방법1 **
  
select e.TOTAL as 시험성적, 
                (select s.name
                   from student s
                  where s.STUDNO = e.STUDNO) as 이름,
                (select s.grade
                   from student s
                  where s.STUDNO = e.STUDNO) as 학년,
                (select h.GRADE
                   from hakjum h
                  where e.TOTAL between h.MIN_POINT and h.MAX_POINT) as 학점            
  from exam_01 e; --방법2
  
--2. dept2 테이블을 이용하여 상위부서명을 다음과 같이 출력하세요.
-- "경영지원부의 상위부서는 사장실 입니다."
--단, 상위부서가 없는 경우는 본인부서명이 출력되도록 하여라.
--nvl이 안되는 이유는 메인쿼리 입장에서 서브쿼리는 하나의 컬럼이다.
--(스칼라 서브쿼리 이용)
select d1.dname ||'의 상위부서는'||
nvl((select d2.DNAME
          from dept2 d2
        where d1.PDEPT = d2.dcode), d1.DNAME) -->where조건으로 (+)생략해도됨
      ||'입니다.' as 설명                             
    from dept2 d1;
    --컬럼 알리아스는 출력 목적이지, 안에서 쓰지 못함 ->where nvl(i.dname,d1.dname)불가

--3. emp 테이블을 이용하여 같은** 부서에서 본인보다 입사연도가 빠른 사람의 수를 각 직원의 이름, 
--부서번호와 함께 출력하세요. 단, 선배수가 많은 사람 순으로 정렬하세요
--3-1) 조인
select e1.ENAME, e1.DEPTNO, count(e2.EMPNO) as 선배수
  from emp e1, emp e2
 where extract(year from e1.HIREDATE) > extract(year from e2.HIREDATE(+))
   and e1.DEPTNO= e2.deptno(+) --***
 group by e1.ENAME, e1.DEPTNO 
order by 선배수 desc; 


--3-2) 스칼라 서브쿼리
select e1.ename, e1. deptno,  
        (select count(e2.EMPNO)
           from emp e2
          where extract(year from e1.HIREDATE) > extract(year from e2.HIREDATE(+))
            and e1.DEPTNO= e2.deptno(+)) as 선배수
  from emp e1
order by 선배수 desc;

