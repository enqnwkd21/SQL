서브 쿼리 : 쿼리 안의 쿼리

--1. 종류
--1)위치, 쓰임에 따라
select ...(select...)   ---스칼라 서브쿼리( 쿼리의 결과를 하나의 컬럼처럼 사용하여 출력하려고)
  from ...(select...)   ---인라인뷰 (퀴리의 결과를 하나의 테이블처럼 사용하려고)
 where ...(select...)   ---(일반) 서브쿼리(쿼리의 결과를 하나의 컬럼(상수)처럼 사용해서 비교하려고)
; 
--2) 형태에 따라
--2-1) 단일행 서브쿼리 : 서브쿼리 결과가 단 하나의 행 리턴
-- 단일 대상과 어울리는 연산자 : =, >, <, <=, >=, ...
-- 서브쿼리 결과가 한 행인 경우는 위 연산자 사용 가능
--SMITH와 같은 부서 직원 출력
select *
  from EMP
 where deptno = (select deptno
                   from EMP
                  where ename = 'SMITH');
                  
--2-2) 다중행 서브쿼리 : 서브쿼리 결과가 다수의 행 리턴
--이름이 A로 시작하는 직원과 같은 부서 직원 출력
select *
  from EMP
 where deptno  = (select deptno
                   from EMP
                  where ename like 'A%'); --error : '=' 연산자는 단하나의 대상과 비교 가능
                  
                 
--2-2) 다중행 서브쿼리 : 서브쿼리 결과가 다수의 행 리턴
--=> 서브쿼리 결과가 다수 행인 경우는 위 연산자 사용 불가
--=> 다중행과 비교 가능한 연산자(in 연산자, all, any)를 사용!
--=> 서브쿼리 결과를 한 행으로 만듬!!
--=> in 연산자
select *
  from EMP
 where deptno  in (select deptno
                   from EMP
                  where ename like 'A%');
                  
--<이름이 A로 시작하는 직원보다 연봉이 높은 직원 출력>
--1)최대값보다 큰 케이스
--1-1) 그룹함수를 사용하여 서브쿼리 결과를 하나의 행으로 줄여서 연산
select *
  from EMP
 where sal  > (select max(sal)
                   from EMP
                  where ename like 'A%');

--1-2) 다중행 서브쿼리 연산자 사용
select *
  from EMP
 where sal  > all(select sal
                   from EMP
                  where ename like 'A%');

--2.최소값보다 큰 케이스
--2-1) 그룹함수를 사용하여 서브쿼리 결과를 하나의 행으로 줄여서 연산                
select *
  from EMP
 where sal  > (select min(sal)
                   from EMP
                  where ename like 'A%');
    
--2-2) 다중행 서브쿼리 연산자 사용   
select *
  from EMP
 where sal  > any(select sal
                   from EMP
                  where ename like 'A%');
                  
--3) 두 값의 평균보다 큰 케이스               
select *
  from EMP
 where sal  > (select avg(sal)
                   from EMP
                  where ename like 'A%');
                  
-- 다중행 서브쿼리 연산자
-- in : =(10,20,30)
-- > all(10,20,30) : 최댓값 리턴(30)
-- < all(10,20,30) : 최솟값 리턴(10)
-- > any(10,20,30) : 최댓값 리턴(10)
-- > any(10,20,30) : 최댓값 리턴(30)

--문제
--student 테이블에서 서재수의 키보다 큰 남학생 정보 출력
select *
  from student
 where substr(jumin,7,1)='1'
   and height > (select height
                   from student
                  where name ='서재수');
                  
select *
  from student
 where substr(jumin,7,1)='1'
   and height > (select height
                   from student
                  where name ='서재수')
   and substr(jumin,7,1)=(select substr(jumin,7,1)
                             from student
                            where name = '서재수');
                            
                            
--student 테이블에서 3학년 학생의 몸무게 중 최댓값보다 몸무게가 많이 나가는 학생 정보 출력
select *
  from student
 where weight > (select max(weight)
                   from student
                  where grade = 3);

select *
  from student
 where weight > all(select weight
                   from student
                  where grade = 3);


--2-3) 다중컬럼 서브쿼리 : 서브쿼리 결과가 다수의 컬럼 리턴
-- '=', in만 가능(일치 조건)
--=>단점 : 대소 비교, 같지 않다 불가
-- ford랑 부서도 같고 job도 같은 직원 출력
select * 
  from emp
 where deptno = (select deptno
                   from EMP
                  where ename = 'FORD')
   and job =( select job
                   from EMP
                  where ename = 'FORD'); 를 아래의 쿼리와 같이 바꿈
                  
                 
select * 
  from emp
 where (deptno, job) = (select deptno, job
                          from EMP
                         where ename = 'FORD');    --순서 맞추는 것 중요
                 

-- 부서별 최대 연봉자
select deptno, max(sal)
  from EMP
 group by deptno;
 
select *
  from EMP
 where (deptno, sal) in (select deptno, max(sal)
                         from EMP
                        group by deptno); 
                    
-- student 테이블에서 성별 몸무게가 가장 많이 나가는 사람 출력
select name, weight
  from student
 where (substr(jumin,7,1), weight) in (select substr(jumin,7,1), max(weight)
                                        from student
                                        group by substr(jumin,7,1)); 
                                        
-- 부서내에서 각 부서의 평균 연봉보다 작은 연봉을 받는 자
select deptno, avg(sal)
  from EMP
 group by deptno;
 
select*
  from emp
 where deptno in (select deptno
                      from EMP
                     group by deptno)   --항상 참 조건(부서별 비교가 성립 X)
    and sal > all(select avg(sal)
                    from EMP
                   group by deptno);    --부서가 같으면서 그 부서의 평균연봉보다 크다라는 조건 성립X
                   
select e.ename, e.sal,e.DEPTNO, i.avg_sal
  from emp e, (select deptno, round(avg(sal),2) as avg_sal
                  from EMP
                 group by deptno) i
 where e.DEPTNO=i.deptno
   --and e.sal<avg(sal); 불가 : where절에 avg 못 씀
   and e.sal< i.avg_sal;    -- 'where절에 알리아스를 왜 쓰나요' 라고 생각할 수 있지만
                                           -- 메인쿼리 입장에선 avg_sal이 알리아스가 아닙니다! 컬럼명이죠
                                           -- 메인쿼리 입장에선 '아~ i라는 테이블의 avg_sal이라는 컬럼이 있나보다' 라고 해석
 
-- professor테이블에서 각 학과별로 평균연봉보다 높은 연봉을 받는 교수 이름, 학과번호, 연봉, 평균연봉출력
select deptno, round(avg(pay),2)
  from professor
 group by deptno;
 
 select *
  from professor p, (select deptno, round(avg(pay),2) as aa
                        from professor
                       group by deptno) i
 where p.DEPTNO=i.deptno
   and p.pay > i.aa;

-- student 테이블에서 각 학년별로 가장 생년월일이 빠른 학생의 이름, 학년, 생년월일 출력
----1) 다중컬럼
select *
  from student 
 where (grade, birthday) in (select grade, min(birthday) as BD
                  from student
                 group by grade);


----2) 인라인뷰
select * 
  from student s, (select grade, min(birthday) as BD
                      from student
                     group by grade) i
 where s.grade = i.grade
   and s.BIRTHDAY = i.BD;


-- student 테이블에서 각 학년별 평균몸무게보다 
--많이(대소 비교=>인라인뷰) 나가는 학생의 이름, 학년, 몸무게와 학년별 평균몸무게 출력
select grade, avg(weight) as avg_weight
  from student
 group by grade;    -- 학년별 평균몸무게

select s.NAME, s.GRADE, s.WEIGHT, i.avg_weight
  from student s, (select grade, avg(weight) as avg_weight
                      from student
                     group by grade) i
 where s.grade = i.grade
   and s.weight > i.avg_weight; 
 
-- student, exam_01테이블을 사용하여 각 학생별로 같은 학년 내 본인보다 시험을 더 잘 본 친구의 수를 
--학생이름 ,학년, 시험성적과 함께 출력
--(단, 본인보다 성적이 좋은 학생이 없어도 출력)

--s1(+)   s2(+)     
-- |    +    |
--e1(+)   e2(+)     
select i1.name, i1.grade, i1.deptno1, i1.total, count(i2.name) as 학생수
  from (select s1.name, s1.GRADE, s1.DEPTNO1, e1.TOTAL
          from student s1, exam_01 e1
         where s1.STUDNO = e1.STUDNO) i1,
 (select s1.name, s1.GRADE, s1.DEPTNO1, e1.TOTAL
          from student s1, exam_01 e1
         where s1.STUDNO = e1.STUDNO) i2            -- 같은 s1써도 문법적 오류X 왜냐 i1, i2는 전혀 다른 테이블
 where i1.grade=i2.grade(+)
  and i1.total<i2.total(+)
 group by i1.name, i1.grade, i1.deptno1, i1.total;
 
select i1.name, i1.grade, i1.deptno1, i1.total, count(i2.name) as 학생수
  from (select s1.name, s1.GRADE, s1.DEPTNO1, e1.TOTAL
          from student s1, exam_01 e1
         where s1.STUDNO = e1.STUDNO) i1,
 (select s2.name, s2.GRADE, s2.DEPTNO1, e2.TOTAL
          from student s2, exam_01 e2
         where s2.STUDNO = e2.STUDNO) i2            -- 가독성만 좋아지는겨
 where i1.grade=i2.grade(+)
  and i1.total<i2.total(+)
 group by i1.name, i1.grade, i1.deptno1, i1.total;
 
 
-- professor 테이블에서 각 교수별로 각 부서별로 평균연봉보다 높은 교수의 이름,
-- 지도학생 수, 학과명 출력
-- s-p
select d.DNAME, round(avg(pay),2), count(s.STUDNO)
   from professor p, student s, department d
  where p.PROFNO = s.PROFNO
    and p.DEPTNO = d.DEPTNO
  group by d.DNAME;--1  
  
--  d - p - i
--      |
--      s(+)
-- oracle 표준
select p.name, d.dname as 학과명, p.deptno, p.pay, 
       round(i.avg_pay) as 소속학과평균연봉, 
       count(s.name) as 지도학생수
  from professor p, (select deptno, avg(pay) as avg_pay
                       from professor
                      group by deptno) i,
       department d, student s               
 where p.deptno = i.deptno
   and p.pay > i.avg_pay
   and p.deptno = d.deptno
   and p.profno = s.profno(+)
 group by p.name, d.dname, p.deptno, p.pay, i.avg_pay;--정답

--내가 처음  오답
select p.NAME, d.DNAME, d.deptno, p.pay, i.avg_pay, count(s.STUDNO)
  from professor p, student s,department d,
                    (select d.DNAME, round(avg(pay),2) as avg_pay,
                            count(s.STUDNO)
                       from professor p, student s, department d
                      where p.PROFNO = s.PROFNO
                        and p.DEPTNO = d.DEPTNO
                      group by d.DNAME) i                    
 where p.pay > i.avg_pay
   and p.DEPTNO= d.DEPTNO
   and d.DNAME = i.dname
   and p.PROFNO = s.PROFNO(+)
  group by p.name, d.dname, d.deptno, p.pay, i.avg_pay;--오답!!!!!!정신차리기  
  
  
-- ansi 표준
select p.name, d.dname as 학과명, p.deptno, p.pay, 
       round(i.avg_pay) as 소속학과평균연봉, 
       count(s.name) as 지도학생수
  from professor p join (select deptno, avg(pay) as avg_pay
                           from professor
                          group by deptno) i
    on p.deptno = i.deptno
   and p.pay > i.avg_pay
  join department d
    on p.deptno = d.deptno
  left outer join student s 
    on p.profno = s.profno
 group by p.name, d.dname, p.deptno, p.pay, i.avg_pay;


연습문제

--1) emp2 테이블에서 출생연도별 최대연봉을 받는 직원의
--이름, 생년월일, 부서명, 연봉, 상위관리자(pempno)를 출력
select to_char(birthday,'YYYY'), max(pay)
  from emp2
 group by to_char(birthday,'YYYY') ;

----1) 인라인뷰
select e.NAME, e.BIRTHDAY, d.dname, e.PAY, e2.EMPNO as 상위관리자
  from emp2 e, (select to_char(birthday,'YYYY') as birth_year, max(pay) as max_pay
                  from emp2
                 group by to_char(birthday,'YYYY')) i,
       dept2 d, emp2 e2
where to_char(e.birthday,'YYYY')=i.birth_year 
-- to_char(e.birthday,'YYYY')=to_char(i.birthday,'YYYY')==>불가: i에는 birthday 컬럼 X
  and e.pay=max_pay
  and e.DEPTNO = d.DCODE
  and e.PEMPNO = e2.EMPNO(+);
  
----2) 다중컬럼 서브쿼리
select e.NAME, e.BIRTHDAY, d.dname, e.PAY, e2.EMPNO as 상위관리자
  from emp2 e, dept2 d, emp2 e2
where (to_char(e.birthday,'YYYY'), e.pay) in (select to_char(birthday,'YYYY'), max(pay)
                                              from emp2
                                             group by to_char(birthday,'YYYY'))
  and e.DEPTNO = d.DCODE
  and e.PEMPNO = e2.EMPNO(+);
    
 
--2) student, exam_01 테이블을 사용하여
--각 학년별 최고 점수를 받은 학생의 이름, 학년, 제1전공명, 성적을 출력
select s.grade, max(e.total)
  from student s, exam_01 e
 where s.STUDNO = e.STUDNO 
 group by grade;

----1) 다중컬럼 서브쿼리
select s1.NAME, s1.grade,e1.total, d.DNAME as 제1전공명
  from student s1, exam_01 e1, department d
 where s1.STUDNO = e1.STUDNO 
   and (s1.GRADE, e1.TOTAL) in (select s1.grade, max(e1.total)
                                  from student s1, exam_01 e1
                                 where s1.STUDNO = e1.STUDNO 
                                 group by grade)
   and s1.deptno1 = d.deptno;

----2) 인라인뷰
select s1.NAME, s1.grade,e1.total, d.DNAME as 제1전공명
  from student s1, exam_01 e1,(select s1.grade, max(e1.total) as max_total
                                  from student s1, exam_01 e1
                                 where s1.STUDNO = e1.STUDNO 
                                 group by grade) i, department d 
 where s1.STUDNO = e1.STUDNO 
   and s1.GRADE = i.grade
   and e1.total = i.max_total
   and s1.DEPTNO1 = d.DEPTNO;
   
-- 
select i1.NAME, i1.grade, i1.total, d.dname as 제1전공명
  from (select s1.NAME, s1.grade,e1.total, s1.deptno1
          from student s1, exam_01 e1
         where s1.STUDNO = e1.STUDNO) i1,
       (select s1.grade, max(e1.total) as max_total
          from student s1, exam_01 e1
         where s1.STUDNO = e1.STUDNO 
         group by grade) i2, department d
 where 1=1 --항상 참인 조건을 입력하여 조건을 수정하기(주석처리) 편하게 하기 위해
   and i1.grade = i2.grade 
   and i1.total = i2.max_total
   and i1.deptno1=d.deptno; 
 

--3) professor 테이블에서 입사연도(1980,1990,2000년대...)별 평균연봉보다 높은 연봉을 받는 교수의 
--이름, 학과명, 연봉, 지도학생 수를 출력하여라.
select substr(to_char(hiredate,'YYYY'),1,3)||'0',
       trunc(extract(year from hiredate),-1)
  from professor;

select trunc(extract(year from hiredate),-1) as hire_year,
       round(avg(pay),2) as avg_pay
  from professor
 group by trunc(extract(year from hiredate),-1);--1

--정답
select p.NAME, d.DNAME as 학과명, p.pay, count(s.STUDNO)
  from professor p, (select trunc(extract(year from hiredate),-1) as hire_year,
                            round(avg(pay),2) as avg_pay
                       from professor
                      group by trunc(extract(year from hiredate),-1)) i,
                      department d, student s
 where p.pay > i.avg_pay
   and trunc(extract(year from p.hiredate),-1)=i.hire_year
   and p.DEPTNO = d.DEPTNO
   and p.PROFNO = s.PROFNO(+) 
 group by p.NAME, d.DNAME, p.pay;



--4) emp 테이블을 이용하여 부서에서 본인보다 입사년도가 빠른 사람의 수를 각 직원의 이름, 
--부서명과 함께 출력하세요. 단, 선배수가 많은 사람 순으로 정렬하세요
--정답
select e1.ename, d.dname, count(e2.empno) as 선배수
  from emp e1, emp e2, dept d
 where extract(year from e1.hiredate) > extract(year from e2.hiredate(+))
   and e1.DEPTNO=e2.DEPTNO(+)
   and e1.DEPTNO=d.deptno
  group by e1.ename, d.dname 
 order by 선배수 desc;
  

   
   


