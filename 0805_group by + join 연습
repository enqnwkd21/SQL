
select * from member2;

--member2 테이블을 읽고
--1. 지역별(addr) 멤버수 출력
select name, addr,
       substr(addr,1,2) as 지역, --substr은 글자 개수
       rpad(substr(addr,1,instr(addr,' ')-1),6,'시') as 지역2 --pad경우 : 한글은 한자리에 2byte
  from member2;--1
  
select substr(addr,1,2) as 지역, count(name) as 멤버수
  from member2
 group by substr(addr,1,2);--정답
  
  
--내 풀이--
select decode((substr(ADDR,1,2)), '서울','서울시','경기','경기도') as 지역,
       count(MID)
  from member2 
 group by decode((substr(ADDR,1,2)), '서울','서울시','경기','경기도');
       
--2. tel의 지역과 addr의 지역이 서로 다른 사람은 정보가 잘못된 사람임
--    정보 수정이 필요한(addr:서울은 서울끼리 묶여야함) 사람의 명단 출력
select name,substr(tel,1,instr(tel,')')-1) as 지역번호, addr,
       decode(substr(tel,1,instr(tel,')')-1),'02','서울', '031', '경기', '032','인천',
            '033','강원','041','충남','042','대전',
            '043','충북','051','부산','052', '울산',
            '053','대구','0534','경북','055','경남','063','전북','064','제주') as 지역,
       substr(addr,1,2) as 주소지역
  from member2
 where decode(substr(tel,1,instr(tel,')')-1),'02','서울', '031', '경기', '032','인천',
            '033','강원','041','충남','042','대전',
            '043','충북','051','부산','052', '울산',
            '053','대구','0534','경북','055','경남','063','전북','064','제주') !=substr(addr,1,2); 

--
select m.*, a.AREA_NAME
  from member2 m, area a
 where substr(tel,1,instr(tel,')')-1) =a.AREA_NO
    and substr(m.ADDR,1,2) != a.AREA_NAME;


 
--3. mjoin과 mpoint를 사용하여 멤버십 가입월(PSTART의 월)별 포인트의 평균을 출력 
----문자표현
select * from mjoin;
select to_char(m1.PSTART,'MM') as "멤버십 가입월", round(avg(m2.MPOINT),2) as "포인트 평균"
  from mjoin m1, mpoint m2
 where m1.MID=m2.MID
 group by to_char(m1.PSTART,'MM');

----숫자표현
select extract(month from m1.PSTART) as "멤버십 가입월", round(avg(m2.MPOINT),2) as "포인트 평균"
  from mjoin m1, mpoint m2
 where m1.MID=m2.MID
 group by extract(month from m1.PSTART);

--4. student, professor, exam_01 테이블을 사용하여 교수별로
-- 지도학생의 시험성적의 평균과 지도학생 수를 교수이름, 교수번호와 함께 출력
-- 단, 지도학생이 없는 경우도 출력
-- p-s-e

select p.NAME as 교수명, p.PROFNO, count(s.STUDNO) as 지도학생수,
       round(avg(nvl(e.TOTAL,0)),2) as 성적평균
  from  professor p, student s, exam_01 e 
 where p.PROFNO= s.PROFNO(+)
   and s.STUDNO = e.STUDNO(+)
 group by p.NAME, p.PROFNO;

----outer join 주의사항*****꼭 기억하기!!!!!!
--1. 특정 조건으로 인해 두 테이블간의 관계에 있어 데이터가 생략되는 경우
--생략을 유발하는 테이블(밑의 예에서는p)에서 파생되는 테이블이 있다면(밑의 예에서의 d)
--기준이 되는 테이블(밑의 예에서 s)입장에서는 p와 d모두 아우터 조인을 수행해야 함
--s-p(+)-d(+)
--
--2. 순환구조를 갖는 경우 아우터 조인 시 결국 모든 테이블에 아우터조인을 수행하는 셈이 됨
--    => 순환구조를 깨기 위해 서브쿼리를 사용하여 테이블끼리의집합을 형성
--a-b           a     b
--| |       =>  |     |
--d-c           d     c
    
    
-- 서브쿼리 : 쿼리 안의 쿼리
select ..., (select...)            -- 스칼라 서브쿼리
  from ..., (select...)            -- 인라인 뷰
 where 대상 연산자 (select...)     -- 서브쿼리
 group by ...
having ...
 order by ...;
    
-- smith와 같은 부서에 있는 사람들의 평균 연봉 출력
select deptno
  from EMP
 where ename = 'SMITH';

select avg(sal) 
  from emp
 where deptno=20;
    
--->서브쿼리 사용 시:    
select avg(sal)
  from emp
 where deptno=(select deptno
          from EMP
         where ename = 'SMITH');
    
-- BLAKE보다 연봉이 높은사람 이름, 부서번호, 연봉 출력
select sal
  from emp
 where ename='BLAKE';

select ename, deptno, sal
  from EMP
 where sal > (select sal
          from emp
         where ename='BLAKE');

-- emp에서 이름이 A로 시작하는 직원과 같은 부서에 있는 직원의 이름, 부서번호, 연봉 출력
select * from emp;

select ename, deptno
  from EMP
 where ename like 'A%';
 
select *
  from EMP
 where deptno in(20,30);

select ename, deptno, sal
  from EMP
 where deptno =(select deptno
                  from EMP
                 where ename like 'A%');    -- 단일 행 하위 질의에 2개 이상의 행이 리턴
                                                                -- '=' 연산은 단 하나의 상수만 비교 가능

select ename, deptno, sal
  from EMP
 where deptno in (select deptno
                  from EMP
                 where ename like 'A%'); 

select *
  from emp
 where deptno = 20 
    or deptno = 30; 를
 
=>
select *
  from emp
 where deptno in (20, 30);






