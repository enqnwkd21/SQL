-- 집합 연산자
-- 두 select 결과(집합)를 하나의 집합으로 합치거나 교집합, 차집합 등을 구할 때 사용
-- select와 select 사이 전달
-- **주의** 두 집합의 select절에 나열되는 컬럼의 수, 순서, 각 순서별 데이터 타입 등 일치
-- 위에 있는 select절의 컬럼의 특성을 대표하게 됨 (컬럼 별칭도 위의 쿼리를 따르게 됨)

--1. 합집합 : 
--1) union : 중복 제거된 결과 ( 두 집합의 교집합이 있을 경우 중복된 데이터는 단 한번만 출력)
---- 중복을 제거하기 위해 내부적으로 정렬 수행 => 교집합이 없을 경우는 불필요한 정렬을 동반하는 쿼리가 됨
select ename, sal, deptno
  from EMP
 where deptno =10
union       --중복을 제거하기 위해 정렬을 가져옴
select ename, sal, deptno
  from EMP
 where deptno =20
 order by deptno;
 
--2) union all : 중복된 데이터도 모두 출력
select ename, sal, deptno
  from EMP
 where deptno =10
union all
select ename, sal, deptno
  from EMP
 where deptno =20
 order by deptno;

-- union 결과와 union all 결과가 같을 경우는 union all이 성능이 더 좋다

-- 문제
-- emp (sal) 데이터와 emp2 (pay) 데이터의 합집합을 구하여
-- 사번, 이름, 부서번호, 연봉을 출력
-- 사번은 모두 8자리로 표현(자유롭게), emp2 직원들의 부서번호는 모두 40으로 표현
-- 연봉은 단위를 맞춰서 출력(자유롭게)
select * from emp2;
select to_char(empno,'00000000') as "empno", ename, deptno, to_char(sal*10000,'99,999,999') as "연봉"
  from emp
union all
select to_char(empno,'00000000') as "empno", name, 40, to_char(pay,'999,999,999')
  from emp2;
  
select lpad(empno,8,'0') as "empno", ename, deptno, to_char(sal*10000,'99,999,999') as "연봉"
  from emp      -- lapd또한 문자로 리턴(내부적으로 to_char 변환 있음)
union all
select to_char(empno,'00000000') as "empno", name, 40, to_char(pay,'999,999,999')
  from emp2;

-- 2. 교집합 (intersect)  : 데이터 타입, 나열 순서 다 같아야 함
select ename, deptno
  from EMP
 where deptno =10
intersect
select ename, deptno
  from EMP
 where deptno in (10,20)
 order by deptno;
 
-- 3. 차집합 ( minus )
select ename, deptno
  from EMP
 where deptno in (10,20)
minus
select ename, deptno
  from EMP
 where deptno = 10;

-- join 
-- 분리된 두 테이블의 데이터를 하나로 병합하여 출력을 원할 때
-- (하나의 테이블에서의 정보를 다른 테이블에 전달하여 매칭된 데이터를 가져올 때 (참조))

--고객
--고객번호 이름 생년월일
--1000    홍길동     90.12.01
--1001    김길동     99.01.12
--...
--
--블랙리스트
--고객번호 이름 생년월일

-- **주의**카티시안 곱(Caresian Product) : 조인 조건을 생략할 경우 두 집합의 발생가능한 모든 집합 출력
-- 올바른 조인조건 전달
select emp.ename, emp.sal, dept.dname
   from emp, dept
  where emp.deptno = dept.deptno;   --양쪽 테이블에 같은 이름의 컬럼명이 있을 경우 반드시 테이블 출처 명시

--문제
--deptno01(제1 전공), deptno02(제2전공)
--student, department 테이블을 사용하여 각 학생의 이름, 학년, 제1전공명 출력
select name, grade, dname
  from student, department
 where deptno1 = deptno;

select student.name, student.grade, department.dname
  from student , department 
 where student.deptno1 = department.deptno; --너무 길어 So..
 
-- table alias 사용 시에는 반드시 table alias를 사용하여 컬럼을 구분하고 테이블명으로 컬럼을 구분하면 X
select s.name, s.grade, d.dname
  from student s , department d
 where s.deptno1 = d.deptno;

-- ansi 표준
select s.name, s.grade, d.dname
  from student s join department d
    on s.deptno1 = d.deptno;

-- equi join : 조인 조건이 등가
-- non equi join : 조인 조건이 등가 X

-- 예제)
-- student, professor,exam_01 테이블을 사용하여 각 학생의 이름, 학년, 지도교수이름, 시험성적을 출력
-- e-s-p
select * from exam_01;
--1) oracle 표준
select s.name as 학생이름, s.grade, p.name as 지도교수이름, e.total 
  from student s, professor p, exam_01 e 
 where s.PROFNO = p.PROFNO 
   and s.STUDNO = e.STUDNO;

--2) ansi 표준
select s.name as 학생이름, s.grade, p.name as 지도교수이름, e.total 
  from student s join professor p 
    on s.profno= p.profno 
    join exam_01 e 
    on s.studno = e.studno;
   
-- 문제
-- 1. emp 테이블에서 부서별 최대연봉과 최저연봉을 부서이름과 함께 출력
select e.deptno, d.dname, max(e.sal), min(e.sal)
   from emp e, dept d
  where e.deptno = d.deptno
  group by e.deptno,d.dname;
  
 -- deptno dname==이런 상황 생각해보기
-- 10     인사부
-- 10     총무부
-- 20     재무부
-- 30     IT운영부
  
-- 2. 부서별 최대연봉을 구하고 최대연봉자의 이름을 출력
select deptno, ename, max(sal)
  from emp 
  group by deptno, ename; -- 잘못된 그룹 정보 (부서별이 아닌 부서=이름 그룹으로 되어버림)
 

 -- equi join : 조인 조건이 등가

 -- non equi join : 조인 조건이 등가 X (<,>)
 --1. gogak, gift 테이블을 사용하여
 -- 각 고객이 가져갈 수 있는 가장 좋은 상품을 고객이름과 함께 출력
select g1.GNAME as "고객이름", g2.GNAME as "상품이름" 
  from gogak g1, gift g2
 where g1.POINT between g2.G_START and g2.G_END;
    
--2.gogak, gift 테이블을 사용하여
-- 각 고객이 가져갈 수 있는 모든 상품을 고객이름과 함께 출력
 select g1.GNAME as "고객이름", g1.POINT, g2.GNAME as "상품이름" 
  from gogak g1, gift g2
 where g1.POINT >= g2.G_START
 order by "고객이름";


