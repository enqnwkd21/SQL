--dbms : DB를 관리하는 소프트웨어(오라클, mmsql, myspl,..)
--db : 데이터의 집합 저장소
--table: 데이터의 저장 단위 (행과 열의 구조)
--속성(열, 컬럼) : table 내에서 특징을 갖는 대상
--스키마 : DB 내에서 특정 유저가 갖는 객체들의 집합 (현업에서는 유저를 지칭하기도 함)
--oracle 구성 : instance(메모리) + database(디스크)
--DB 접속 방법: 
--1. 직접 접속(cmd =>sqlplus scott/oracle)
--2. 원격 접속(접속룰 사용(orange))




--단축키
--ctrl + o : 파일 열기
--ctrl + n : 새로운 접속 시도
--ctrl + s : 현재 탭 저장
--ctrl + t : 새로운 탭 열기
--ctrl + - : 현재 커서 혹은 드래그 영역 주석 처리
--ctrl + shift : 현재 커서 혹은 드래그 영역 주석 해제
--ctrl + u : 드래그 영역 소문자
--ctrl + shift + u : 드래그 영역 대문자 변경 
--ctrl + shift + f : 쿼리 포맷 변경(줄맞추기)

select *
  from emp;
  
--sql의 기능
--1. 조회(select)
--2. 데이터 수정(update)
--3. 데이터 삭제(delete, truncate, drop)
--4. 데이터 입력(insert)
--5. admin(테이블생성, 삭제, 변경,, 기타...)



--1. select 문법
select          --컬럼 선택
  from          --테이블 명 전달
 where          --연산자는 where에 쓴다. 조건 전달(행 선택)   => 대상(컬럼) 연산자 상수=(sal > 3000)
 group by
having
 order by;
 
select *        -- *는 모든 컬럼
  from emp;
  
select empno, ename, sal       -- 기본적으로 *와 컬럼명을 동시에 쓸 수 없다.
  from emp;
  
select *
  from emp                              --emp와 ename은 대명사=>''안 붙임
 where ename = 'SMITH';         --날짜와 문자 상수는 ('')홑 따움표로 전달
 
select *
  from emp                     
 where ename = 'smith';         --조회x, 저장된 데이터는 대소를 구분하기 때문 (원본 그대로 전달해야함)
 
 
select *
  from emp                     
 where lower(ename) = 'smith';  --ename 컬럼 값을 모두 소문자로 변경 후 비교
 
 
select *
  from emp
 where upper(ename) = 'SMITH';  --ename 컬럼 값을 모두 대문자로 변경 후 비교
 
 
select *
  from emp
 where initcap(ename) = 'Smith'; --ename 컬럼 값을 모두 카멜표기법으로 변경 후 비교
 
 
--10번 부서이면서 sal이 3000 이상인 직원 선택
select *
  from emp
 where deptno = 10
  and sal >= 3000;       --논리 연산자(and : 두 조건 모두 만족=교집합, or : 두 조건 중 하나만 만족=합집합) 
                                 --(순서는 무조건 >=, <=/ !=,<>'같지 않다')

-- between A and B 연산자 : A 보다 크거나 같고 B 보다 작거나 같은 
-- 주의 :  무조건 A 와 B 를 포함하는 결과 출력, 작은 값을 A에 큰 값을 B에 전달 (A < B 순서)

-- emp에서 sal이 3000 이상이면서 5000 이하인 직원의 이름, 부서번호, sal 출력
-- 숫자 뿐만 아닌 문자도 가능 ( 가나다 순)
select ename, deptno, sal
  from emp
 where sal >= 3000
   and sal <= 5000;

select ename, deptno, sal
  from emp
 where sal between 3000 and 5000;


select *
  from EMP
 where ename >= 'S';    --문자도 대소비교 가능


--in 연산자 : =or 연산자의 축약형 (A,B)
--emp 테이블 부서번호가 10번 또는 30번인 직원의 이름, sal, 부서번호 출력

select ename, sal, deptno
  from EMP
 where deptno =10
    or deptno =30;
    
select ename, sal, deptno
  from EMP
 where deptno in (10,30);
 
 
--like 연산자 : 패턴 연산자 ex) 'S'로 시작하는, 끝나는, 등등...
--ename이 S 로 끝나는 직원 정보 모두 출력
select *
  from EMP
 where ename >= 'S'
   and ename < 'T';
   
select *
  from EMP
 where ename like 'S%';      -- % : 자릿수 상관없이 모든이라는 의미,뒤에 무엇이든 와도 상관없음
 
 
--ename이 T로 끝나는 직원 정보 모두 출력
select *
  from EMP
 where ename like '%T';
 
 
 
--ename에서 위치 상관없이 T를 하나 이상 포함하는 직원 정보 모두 출력
select *
  from EMP
 where ename like '%T%';
 
 
--ename에서 세번째 글자가 I인 직원 정보 모두 출력
select *
  from EMP
 where ename like '__I%';       --'_': 하나당 한 글자의 모든이란 의미, 한 자릿수에 해당되는 별표
 
 
--논리연산자
--1. and
--2. or
--3. not(부정연산자:except)--not 뒤의 조건을 빼는 것임
--not like
--not in      --not in (10,20) => 10과 20이 아닌 것들
--not between
--is not null

--null : 아직 정의되지 않은 값 (0과는 다른, '없다'와는 다른)
select *
  from emp
 where comm is not NULL;
 
select *
  from student;


연습문제

--연산자 문제 2 : EMP테이블에서 사원번호(empno)가 7902, 7788, 7566
--인 사원의 사원번호, 성명, 업무, 급여, 입사일자(hiredate)를 출력하여라
select empno, ename, job, sal, hiredate
  from emp
 where empno in (7902, 7788,7566);

--연산자 문제 3 : EMP테이블에서 입사일자가 82년도에 입사한 사원의 사
--원번호, 성명, 담당업무, 급여, 입사일자, 부서번호를 출력하여라.
select empno, ename, job, sal, hiredate, deptno
  from EMP
 where extract(year from hiredate) = '1982';

--연산자 문제 7 : EMP 테이블에서 급여가 1100 이상이고, JOB이
--Manager인 사원의 사원번호, 성명, 담당업무, 급여, 입사일자, 부서번호
--를 출력하여라.
select empno, ename, job, sal, hiredate, deptno
  from EMP
 where sal >= 1100
   and job = 'MANAGER';     -- 대문자로 써야 됨***
   
select *
  from emp
 where initcap(job) = 'Manager';


--연산자 문제 8 : EMP 테이블에서 급여가 1100 이상이거나, 이름이 M으
--로 시작하지 않는 사원의 사원번호, 성명, 담당업무, 급여, 입사일자, 부서
--번호를 출력하여라.
select empno, ename, job, sal, hiredate, deptno
  from EMP
 where sal>=1100 
    or ename not like 'M%';
    

--마지막 문제 : STUDENT 테이블에서 'ㅅ'성인 학생의 이름, 학년, 키를 출력
select name, grade, height
  from student
 where name >= '사' 
   and name < '아';

